# Voilaah MALL API v1

# General

A simple HTTP RESTfulAPI for an e-shop project using OFFLINE Mall plugin with JWT Token authentication.

**General information:**
- [General notes](#notes)
- [API Overview](#overview)
- [Standard flow](#flow)
- [Authentication](#authentication)

**Endpoints:**
- [Products](#products)
- [Services](#services) (#TODO)
- [Categories](#categories)
- [Brands](#brands)
- [Shippings](#shippings)  (#TODO)
- [Payments](#payments) (#TODO)
- [Cart](#cart) (#WIP)
- [Customer](#customers) (#TODO)
- [Wishlist](#wishlist) (#TODO)





<a name="notes"></a>
# General Notes

- all the dates are expressed in UNIX timestamp format
- you can ping the api here `/api/mall/ping`
- list of resources like products, categories and brands display a paginator helper inside the tag 'meta'

Ex:
```json
"meta": {
    "pagination": {
        "total": 1,
        "count": 1,
        "per_page": 15,
        "current_page": 1,
        "total_pages": 1,
        "links": []
    }
}
```

- all the API endpoints are using the same format:

```json
{
    "version": "v1",
    "resource": "products",
    "status": "success",
    "sort": "latest",
    "direction": "desc",
    "data": []
}
```


<a name="shippings"></a>

# Shippings

`GET /api/mall/shippings`


<a name="customers"></a>
# Customers

`GET /api/mall/auth/me/customer`

`GET /api/mall/auth/me/addresses`

`GET /api/mall/auth/me/orders`

<a name="categories"></a>
# Categories

`GET /api/mall/categories`

Return a list of categories sorted and paginated.

## Sorting

default sorting is by category name

`GET /api/mall/products?sort=name?direction=asc`

### Examples

`GET /api/mall/products?sort=name&direction=desc`

`GET /api/mall/products?sort=latest`


### Sort Options

Add in your api call `?sort=`

`name`

`latest`

### Sort Direction

Add in your api call `&directionsort=`

`asc` or `desc`


<a name="products"></a>
# Products

Return a list of products sorted and paginated with the relations `variants`, `categories`, `brand`, `image_sets` by default.

## Sorting

default sorting is by latest products

`GET /api/mall/products?sort=latest`

### Examples

`GET /api/mall/products?sort=name&direction=asc`

`GET /api/mall/products?sort=bestseller&direction=desc`

`GET /api/mall/products?sort=price_low`

`GET /api/mall/products?sort=price_high`



### Sort Options

Add in your api call `?sort=`

`bestseller`

`ratings`

`latest`

`price_low`

`price_high`

`oldest`

`name`


### Sort Direction

Add in your api call `&direction=`

`asc` or `desc`


## Product details

Return the detail of a product with the relations `variants`, `categories`, `brand`, `services`, `reviews`, `image_sets` by default.


<a name="flow"></a>
# Standard flow

#### List all categories
`GET /api/mall/categories`
`GET /api/mall/categories?sort=name&direction=asc` => default
`GET /api/mall/categories?sort=name&direction=desc`

#### List all products in one category
`GET /api/mall/categories/coffee`

#### Detail of a product
`GET /api/mall/products/coffee`

#### Detail of a product variant
`GET /api/mall/products/coffee/latte`

#### Add a single item into the cart
`POST /api/mall/cart`

#### Update an existing cart item
`PUT /api/mall/cart/{cartItemId}`

#### Delete an existing cart item
`DELETE /api/mall/cart/{cartItemId}`

#### Reset the whole cart
`DELETE /api/mall/cart`

#### Checkout
`POST /api/mall/cart/checkout`

#### List all shippings
`GET /api/mall/shippings`

#### List all discounts
`GET /api/mall/discounts`


<a name="cart"></a>
## Cart

#### Get the current cart
`GET /api/mall/cart`

Retrieve a logged-in user or guest user.


### Responses

**SUCCESS**

> Code: 200

```json
{
    "version": "v1",
    "resource": "cart",
    "path": "api/mall/cart",
    "data": {
        "id": 2,
        "session_id": "goMddEufn5epcDX1HAj2P9Mwz3vYSyhikIarcoLyC2LsZLA65SAzhfezpUSVr0MvTxF40VfylVyQfsBWB19eIDuOZw0ZJvdeZIuO",
        "customer_id": null, /* means an anonymous cart */
        "shipping_address_id": null,
        "billing_address_id": null,
        "shipping_method_id": 1,
        "payment_method_id": null,
        "items": [
            {
                "id": 1,
                "cart_id": 2,
                "product_id": 1,
                "variant_id": 3,
                "quantity": 1,
                "weight": 9000,
                "price": {
                    "USD": 895,
                    "EUR": 795,
                    "CHF": 899
                },
                "created_at": 1593409835,
                "updated_at": 1593409835
            }
        ],
        "created_at": 1593407728,
        "updated_at": 1593407728
    }
}
```


#### Add a single item into the cart
`POST /api/mall/cart`


### Parameters

| Name                   | Type    | Required | Description                     |
|------------------------|---------|----------|---------------------------------|
| product_id             | int     | Yes      | product ID                      |
| variant_id             | int     | No       | variant ID                      |
| quantity               | int     | Yes      | Quantity > 0                    |
| shipping_method_id     | int     | Yes      | Shipping method                 |
| service_options        | array   | Yes      | services options                |
| return_asked           | string  | Yes      | return value: "cart" or "item"  |

### Responses

**SUCCESS**

> Code: 200

```json
{
    "data": {
        "id": 1,
        "cart_id": 2,
        "product_id": 1,
        "variant_id": 3,
        "quantity": 1,
        "weight": 9000,
        "price": {
            "USD": 895,
            "EUR": 795,
            "CHF": 899
        },
        "created_at": 1593409835,
        "updated_at": 1593409835
    }
}
```



#### Update an existing cart item
`PUT /api/mall/cart/{cartItemId}`

### Parameters

| Name                   | Type    | Required | Description                     |
|------------------------|---------|----------|---------------------------------|
| quantity               | int     | Yes      | Quantity > 0                    |
| shipping_method_id     | int     | Yes      | Shipping method                 |
| service_options        | array   | Yes      | services options                |
| notes                  | string  | No       | customer notes (not available)  |
| return_asked           | string  | Yes      | return value: "cart" or "item"  |

### Responses

**SUCCESS**

> Code: 200



#### Delete an existing cart item
`DELETE /api/mall/cart/{cartItemId}`

### Responses

**SUCCESS**

> Code: 200


#### Reset the whole cart
`DELETE /api/mall/cart`


<a name="authentication"></a>

Here's the list of available endpoints for this plugin.

> If you are using [**Postman**](https://www.getpostman.com/), you can [click here to import the collection](https://www.getpostman.com/collections/5667c055f6f81ff3f821) with all the calls that you need to test it.

## Login

`POST /api/mall/auth/login`

### Parameters

| Name              | Type   | Required | Description               |
|-------------------|--------|----------|---------------------------|
| login            | string | Yes      | Account login attribute   |
| password          | string | Yes      | Account password          |

> The field `login` value can be the account `email` or `username`. You can select it on `RainLab.User` configuration what field should be used for login.

### Responses

**SUCCESS**

> Code: 200

```json
{
  token: (string),
  user: (object)
}
```

**ERROR**

> Code: 401

```json
{
  error: (invalid_credentials|could_not_create_token|user_inactive|user_is_banned)
}
```

## Register

`POST /api/mall/auth/register`


### Parameters

| Name                  | Type   | Required | Description              |
|-----------------------|--------|----------|--------------------------|
| username              | string | No       | Account username         |
| email                 | string | Yes      | Account email            |
| password              | string | Yes      | Account password         |
| password_confirmation | string | No       | Confirm the new password |

> The field `username` can be **required**. It depends of your `RainLab.User` configuration.

### Responses

**SUCCESS**

> Code: 201

```json
[]
```

**ERROR**

> Code: 401

```json
{
  error: (object|registration_disabled)
}
```

### Supported events

- `rainlab.user.beforeRegister`
- `rainlab.user.register`


## Account Activation

`POST /api/mall/auth/account-activation`


### Parameters

| Name            | Type   | Required | Description             |
|-----------------|--------|----------|-------------------------|
| activation_code | string | Yes      | Account activation code |

### Responses

**SUCCESS**

> Code: 200

```json
[]
```

**ERROR**

> Code: 422

```json
{
  error: (invalid_activation_code|invalid_user|user_not_found)
}
```

## Forgot Password

`POST /api/mall/auth/forgot-password`


### Parameters

| Name  | Type   | Required | Description   |
|-------|--------|----------|---------------|
| email | string | Yes      | Account email |

### Responses

**SUCCESS**

> Code: 200

```json
[]
```

**ERROR**

> Code: 404

```json
{
  error: (user_not_found)
}
```

## Reset Password

`POST /api/mall/auth/reset-password`

**Route name**

`api.auth.reset-password`

### Parameters

| Name                  | Type   | Required | Description              |
|-----------------------|--------|----------|--------------------------|
| reset_password_code   | string | Yes      | Reset password code      |
| password              | string | Yes      | Account new password     |
| password_confirmation | string | No       | Confirm the new password |

### Responses

**SUCCESS**

> Code: 200

```json
[]
```

**ERROR**

> Code: 422

```json
{
  error: (invalid_reset_password_code|invalid_user|invalid_reset_password_code)
}
```

## Refresh Token

`POST /api/mall/auth/refresh-token`


### Parameters

| Name                  | Type   | Required | Description              |
|-----------------------|--------|----------|--------------------------|
| token                 | string | Yes      | Valid user JWToken       |

### Responses

**SUCCESS**

> Code: 200

```json
{
  token: (string)
}
```

**ERROR**

> Code: 403

```json
{
  error: (could_not_refresh_token|given_token_was_blacklisted)
}
```

## Get User

`GET /api/mall/auth/me`

**Middleware**

`jwt.auth`


### Parameters

| Name     | Type   | Required | Description               |
|----------|--------|----------|---------------------------|
| token    | string | Yes      | Valid token               |

### Responses

**SUCCESS**

> Code: 200

```json
{
  user: (object)
}
```

**ERROR**

> Code: 404

```json
{
  error: (user_not_found)
}
```
